////  CameraModel.swift//  photojojo////  Created by Adam Bowen on 1/23/15.//  Copyright (c) 2015 Ochre. All rights reserved.//import Foundationclass CameraModel {    // Handles communication with the Photojojo API    var apiHandler: ApiHandlerModel          var numberOfPhotosPurchased : Int? {        didSet {          updateCameraOnUsersDevice("numOfPhotosPurchased", value: numberOfPhotosPurchased!)        }    }        var numberOfPhotosUsed : Int = 0 {        didSet {          if let id = cameraID {            println("Number of photos used is now \(numberOfPhotosUsed)")            updateCameraOnUsersDevice("numOfPhotosUsed", value: numberOfPhotosUsed)            updateApiWithShotsUsed(id, shotsUsed: numberOfPhotosUsed)          }        }    }          var cameraID : Int! {        didSet {        updateCameraOnUsersDevice("camera_id", value: cameraID!)        }    }        var couponCode : String!    var couponUsesLeft : Int!    var couponNumOfPhotos : Int!    var couponDollarAmount : NSNumber!    var arrayOfFailedUploadingPhotos : [NSString]! {        didSet {          if arrayOfFailedUploadingPhotos != nil {            updateCameraOnUsersDevice("photosThatFailedToUpload", value: arrayOfFailedUploadingPhotos!)      }        }    }        var arrayOfFailedUploadingPhotoParameters : [NSDictionary]! {        didSet {          if arrayOfFailedUploadingPhotoParameters != nil {            updateCameraOnUsersDevice("photoParamsThatFailedToUpload", value: arrayOfFailedUploadingPhotoParameters!)      }        }    }          init(apiHandler: ApiHandlerModel) {        self.apiHandler = apiHandler        self.arrayOfFailedUploadingPhotos = self.readDeviceForPhotosThatNeedToBeUploaded("photosThatFailedToUpload") as? [NSString]        self.arrayOfFailedUploadingPhotoParameters = self.readDeviceForPhotosThatNeedToBeUploaded("photoParamsThatFailedToUpload") as? [NSDictionary]    }          func createNewCamera(token: STPToken?, userId : Int, completion: (String?)->()){        println("Attempting to create New Camera in PhotoJoJo Db...")        numberOfPhotosUsed = 0        if numberOfPhotosPurchased == nil {          numberOfPhotosPurchased = 27        }        var params = [          "user_id" : "\(userId)",          "shots" : "\(numberOfPhotosPurchased!)",          "shots_used" : "\(numberOfPhotosUsed)"        ]      if let stripeToken = token {        params["stripe_token"] = stripeToken.tokenId      }      if let aCouponCode = couponCode {            params["coupon_code"] =  aCouponCode      }            #if DEBUG          params["stripe_test_mode"] = "YESPLEASE"      #endif            apiHandler.POST("cameras", parameters: params) { jsonResponse in        if let jsonData = jsonResponse {          let jojoMessage = jsonData.objectForKey("message") as! String            // If DB error            if jsonData.objectForKey("error") as! Bool {              completion("Could not create new camera : \(jojoMessage)")              return          }          else { // else save camera Id            self.cameraID = jsonData.objectForKey("id") as! Int            completion(nil)            return            }          }          completion("Network Error : Could not create new camera.")        }    }          func readDeviceForPhotosThatNeedToBeUploaded(key : String)->[AnyObject]?{        if let photosSavedOnPhone = NSUserDefaults.standardUserDefaults().objectForKey(key) as? NSData {          if key == "photosThatFailedToUpload" {            println("Found Photos that need to be Uploaded")            return NSKeyedUnarchiver.unarchiveObjectWithData(photosSavedOnPhone) as! [NSString]!          }          else if key == "photoParamsThatFailedToUpload" {            println("Found Photo Params that Need to be Uploaded")            return NSKeyedUnarchiver.unarchiveObjectWithData(photosSavedOnPhone) as! [NSDictionary]!          }          println("Unable to unarchive photos")        }        return nil    }        func readAPIForCouponExistence(couponCode: String, completion: (Result)->()) {        apiHandler.GET("coupons/\(couponCode)", parameters:nil) { jsonResponse in            if let response = jsonResponse.map(self.updateCouponInfo) {                if response {                    completion(Result.Success())                    return                }                completion(Result.Failure("Could not validate coupon."))                return            }            completion(Result.NetworkFailure())        }    }        func updateCouponInfo(json : AnyObject) -> Bool {        if let json2 = json.objectForKey("coupon") as? NSDictionary {            self.couponUsesLeft = json2.objectForKey("uses_left") as! Int            self.couponNumOfPhotos = json2.objectForKey("photos") as! Int            self.couponCode = json2.objectForKey("code") as! String            let dollarAmountString = json2.objectForKey("amount") as! NSString            self.couponDollarAmount = dollarAmountString.floatValue            return true        }        return false    }      func updateApiWithShotsUsed(id: Int, shotsUsed: Int) {        let parameters = [          "shots_used": shotsUsed        ]                println("Updating camera #\(id) with the shots_used=\(shotsUsed)")              apiHandler.PUT("cameras/\(id)", parameters:parameters) { jsonResponse in          if let json = jsonResponse {            if json.objectForKey("error") as! Bool {              println(json.objectForKey("message") as! String)            }          }        }    }          func updateCameraOnUsersDevice(key : String, value : AnyObject){        println("Saved \(key) to phone")        let objectToSave = NSKeyedArchiver.archivedDataWithRootObject(value)        NSUserDefaults.standardUserDefaults().setObject(objectToSave, forKey: key)    }          func deleteCameraFromUsersDevice(){          println("Deleting camera data from device.")          NSUserDefaults.standardUserDefaults().setObject(nil, forKey: "camera_id")          NSUserDefaults.standardUserDefaults().setObject(nil, forKey: "numOfPhotosPurchased")          NSUserDefaults.standardUserDefaults().setObject(nil, forKey: "numOfPhotosUsed")          NSUserDefaults.standardUserDefaults().setObject(nil, forKey: "photosThatFailedToUpload")          NSUserDefaults.standardUserDefaults().setObject(nil, forKey: "photoParamsThatFailedToUpload")    }}